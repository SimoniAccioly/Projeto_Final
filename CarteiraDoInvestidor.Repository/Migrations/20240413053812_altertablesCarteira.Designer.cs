// <auto-generated />
using System;
using CarteiraDoInvestidor.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarteiraDoInvestidor.Repository.Migrations
{
    [DbContext(typeof(CarteiraDoInvestidorContext))]
    [Migration("20240413053812_altertablesCarteira")]
    partial class altertablesCarteira
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarteiraDoInvestidor.Domain.Carteira.Agreggates.Ativos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CarteirasId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Corretora")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DataDaCompra")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2");

                    b.Property<string>("LadoDaOperacao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Papel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("PrecoMedio")
                        .HasColumnType("float");

                    b.Property<int>("Quantidade")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<double>("TaxaDeCorretagem")
                        .HasMaxLength(50)
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CarteirasId");

                    b.ToTable("Ativos", (string)null);
                });

            modelBuilder.Entity("CarteiraDoInvestidor.Domain.Carteira.Agreggates.Carteiras", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NomeCarteira")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Carteiras", (string)null);
                });

            modelBuilder.Entity("CarteiraDoInvestidor.Domain.Conta.Agreggates.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DtNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("UsuarioMapping", (string)null);
                });

            modelBuilder.Entity("CarteiraDoInvestidor.Domain.Financeiro.Agreggates.Assinatura", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DtAtivacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PlanoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PlanoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Assinatura", (string)null);
                });

            modelBuilder.Entity("CarteiraDoInvestidor.Domain.Financeiro.Agreggates.Cartao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<int>("CVV")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Validade")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Cartao", (string)null);
                });

            modelBuilder.Entity("CarteiraDoInvestidor.Domain.Financeiro.Agreggates.Notificacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DtNotificacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mensagem")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("TipoNotificacao")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("UsuarioDestinoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioRemetenteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioDestinoId");

                    b.HasIndex("UsuarioRemetenteId");

                    b.ToTable("Notificacao", (string)null);
                });

            modelBuilder.Entity("CarteiraDoInvestidor.Domain.Financeiro.Agreggates.Plano", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Plano", (string)null);
                });

            modelBuilder.Entity("CarteiraDoInvestidor.Domain.Financeiro.Agreggates.Transacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CartaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("DtTransacao")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartaoId");

                    b.ToTable("Transacao", (string)null);
                });

            modelBuilder.Entity("CarteiraDoInvestidor.Domain.Carteira.Agreggates.Ativos", b =>
                {
                    b.HasOne("CarteiraDoInvestidor.Domain.Carteira.Agreggates.Carteiras", null)
                        .WithMany("ListaDeAtivos")
                        .HasForeignKey("CarteirasId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CarteiraDoInvestidor.Domain.Carteira.Agreggates.Carteiras", b =>
                {
                    b.HasOne("CarteiraDoInvestidor.Domain.Conta.Agreggates.Usuario", null)
                        .WithMany("Carteiras")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarteiraDoInvestidor.Domain.Financeiro.Agreggates.Assinatura", b =>
                {
                    b.HasOne("CarteiraDoInvestidor.Domain.Financeiro.Agreggates.Plano", "Plano")
                        .WithMany()
                        .HasForeignKey("PlanoId");

                    b.HasOne("CarteiraDoInvestidor.Domain.Conta.Agreggates.Usuario", null)
                        .WithMany("Assinaturas")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Plano");
                });

            modelBuilder.Entity("CarteiraDoInvestidor.Domain.Financeiro.Agreggates.Cartao", b =>
                {
                    b.HasOne("CarteiraDoInvestidor.Domain.Conta.Agreggates.Usuario", null)
                        .WithMany("Cartoes")
                        .HasForeignKey("UsuarioId");

                    b.OwnsOne("CarteiraDoInvestidor.Domain.ValueObject.Monetario", "Limite", b1 =>
                        {
                            b1.Property<Guid>("CartaoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Valor")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Limite");

                            b1.HasKey("CartaoId");

                            b1.ToTable("Cartao");

                            b1.WithOwner()
                                .HasForeignKey("CartaoId");
                        });

                    b.Navigation("Limite")
                        .IsRequired();
                });

            modelBuilder.Entity("CarteiraDoInvestidor.Domain.Financeiro.Agreggates.Notificacao", b =>
                {
                    b.HasOne("CarteiraDoInvestidor.Domain.Conta.Agreggates.Usuario", "UsuarioDestino")
                        .WithMany("Notificacoes")
                        .HasForeignKey("UsuarioDestinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarteiraDoInvestidor.Domain.Conta.Agreggates.Usuario", "UsuarioRemetente")
                        .WithMany()
                        .HasForeignKey("UsuarioRemetenteId");

                    b.Navigation("UsuarioDestino");

                    b.Navigation("UsuarioRemetente");
                });

            modelBuilder.Entity("CarteiraDoInvestidor.Domain.Financeiro.Agreggates.Plano", b =>
                {
                    b.OwnsOne("CarteiraDoInvestidor.Domain.ValueObject.Monetario", "Valor", b1 =>
                        {
                            b1.Property<Guid>("PlanoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Valor")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("PlanoId");

                            b1.ToTable("Plano");

                            b1.WithOwner()
                                .HasForeignKey("PlanoId");
                        });

                    b.Navigation("Valor")
                        .IsRequired();
                });

            modelBuilder.Entity("CarteiraDoInvestidor.Domain.Financeiro.Agreggates.Transacao", b =>
                {
                    b.HasOne("CarteiraDoInvestidor.Domain.Financeiro.Agreggates.Cartao", null)
                        .WithMany("Transacoes")
                        .HasForeignKey("CartaoId");

                    b.OwnsOne("CarteiraDoInvestidor.Domain.ValueObject.Monetario", "Valor", b1 =>
                        {
                            b1.Property<Guid>("TransacaoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Valor")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("ValorTransacao");

                            b1.HasKey("TransacaoId");

                            b1.ToTable("Transacao");

                            b1.WithOwner()
                                .HasForeignKey("TransacaoId");
                        });

                    b.OwnsOne("CarteiraDoInvestidor.Domain.ValueObject.Merchant", "Merchant", b1 =>
                        {
                            b1.Property<Guid>("TransacaoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Nome")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("MerchantNome");

                            b1.HasKey("TransacaoId");

                            b1.ToTable("Transacao");

                            b1.WithOwner()
                                .HasForeignKey("TransacaoId");
                        });

                    b.Navigation("Merchant")
                        .IsRequired();

                    b.Navigation("Valor")
                        .IsRequired();
                });

            modelBuilder.Entity("CarteiraDoInvestidor.Domain.Carteira.Agreggates.Carteiras", b =>
                {
                    b.Navigation("ListaDeAtivos");
                });

            modelBuilder.Entity("CarteiraDoInvestidor.Domain.Conta.Agreggates.Usuario", b =>
                {
                    b.Navigation("Assinaturas");

                    b.Navigation("Carteiras");

                    b.Navigation("Cartoes");

                    b.Navigation("Notificacoes");
                });

            modelBuilder.Entity("CarteiraDoInvestidor.Domain.Financeiro.Agreggates.Cartao", b =>
                {
                    b.Navigation("Transacoes");
                });
#pragma warning restore 612, 618
        }
    }
}
